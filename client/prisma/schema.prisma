// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// model User {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   name          String?
//   email         String?   @unique
//   createdAt     DateTime  @default(now())
//   emailVerified DateTime? @map("verifiedAt")
//   sessions      Session[]
//   recipes       Recipe[]
//   comments      Comment[]
//   Account       Account[]

//   @@map("users")
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Recipes       Recipe[]
  Comments      Comment[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

type Ingredient {
  name        String
  quantity    Float
  description String?
  createdAt   DateTime @default(now())
}

model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  recipeId String @db.ObjectId
  authorId String @db.ObjectId
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  author   User   @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model Recipe {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  authorId    String       @db.ObjectId
  title       String
  description String
  steps       String[]
  ingredients Ingredient[]
  comments    Comment[]
  author      User         @relation(fields: [authorId], references: [id])

  @@map("recipes")
}
